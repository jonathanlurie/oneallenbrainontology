{"version":3,"file":"oneallenbrainontology.js","sources":["../src/OneAllenBrainOntology.js"],"sourcesContent":["import one from './data/1.json'\n\nlet flatList = []\nlet listOfNames = []\nlet listOfAcronyms = []\nlet listOfIds = []\nlet listOfFullIndex = []\nlet indexPerId = {}\nlet indexPerName = {}\nlet indexPerAcronym = {}\nlet indexPerAll = {}\nlet rootNodeId = null\n\n\nfunction buildIndex(){\n  let nodesToExplore = [one]\n\n  while(nodesToExplore.length) {\n    let node = nodesToExplore.pop()\n    let name = node.name.toLowerCase().trim()\n    let acronym = node.acronym.toLowerCase().trim()\n    let id = node.id\n\n    if(node.parent_structure_id === null){\n      rootNodeId = id\n    }\n\n    node.children_structure_id = []\n\n    flatList.push(node)\n    indexPerId[id] = node\n    indexPerName[name] = node\n    indexPerAcronym[acronym] = node\n    let fullIndex = `${name} ${acronym} ${id}`\n    indexPerAll[fullIndex] = node\n    listOfFullIndex.push(fullIndex)\n    listOfNames.push(name)\n    listOfAcronyms.push(acronym)\n    listOfIds.push(id)\n\n    node.isLeaf = node.children.length === 0\n\n    // adding the children to the list\n    for(let i=0; i<node.children.length; i++){\n      let child = node.children[i]\n      node.children_structure_id.push(child.id)\n      nodesToExplore.push(child)\n    }\n\n    // we dont want to keep the nested structure\n    // as it's not going to be like that in Nexus\n    delete node.children\n  }\n}\n\nbuildIndex()\n\n\n/**\n * OneAllenBrainOntology provides a set of convenience methods related to searching\n * and indexing brain region from the 1.json of the Allen Brain Institute.\n * It contains only static methods, thus no object needs to be\n * instantiated and methods can be called directly.\n *\n * Example:\n *\n * ```javascript\n * import oneallenbrainontology from 'oneallenbrainontology'\n *\n * let allRegionNames = oneallenbrainontology.getAllRegionNames()\n * ```\n *\n * When querying a specific brain region, the returned value if found will be of the form:\n * ```javascript\n * {\n *   \"id\": 567,\n *   \"atlas_id\": 70,\n *   \"ontology_id\": 1,\n *   \"acronym\": \"CH\",\n *   \"name\": \"Cerebrum\",\n *   \"color_hex_triplet\": \"B0F0FF\",\n *   \"graph_order\": 2,\n *   \"st_level\": 2,\n *   \"hemisphere_id\": 3,\n *   \"parent_structure_id\": 8,\n *   \"children_structure_id\": [\n *     688,\n *     623\n *   ],\n *   \"isLeaf\": false\n * }\n * ```\n */\nclass OneAllenBrainOntology {\n\n  /**\n   * Get the root node, which is the most top level node and has no parent.\n   *\n   * ```javascript\n   * let rootNode = oneallenbrainontology.getRootNode()\n   * ```\n   * @return {Object} the node\n   */\n  static getRootNode(){\n    return indexPerId[rootNodeId]\n  }\n\n\n  /**\n   * Get the full list of region names (lowercase) as an array\n   *\n   * ```javascript\n   * let allRegionNames = oneallenbrainontology.getAllRegionNames()\n   * ```\n   *\n   * @return {Array}\n   */\n  static getAllRegionNames(){\n    return listOfNames\n  }\n\n\n  /**\n   * Get the full list of region acronyms (lowercase) as an array\n   *\n   * ```javascript\n   * let allRegionAcronyms = oneallenbrainontology.getAllRegionAcronyms()\n   * ```\n   *\n   * @return {Array}\n   */\n  static getAllRegionAcronyms(){\n    return listOfAcronyms\n  }\n\n\n  /**\n   * Get the full list of region ID (integers) as an array\n   *\n   * ```javascript\n   * let allBrainRegionId = oneallenbrainontology.getAllRegionId()\n   * ```\n   *\n   * @return {Array}\n   */\n  static getAllRegionId(){\n    return listOfIds\n  }\n\n\n  /**\n   * Get a region by its strict full name (case insensitive)\n   *\n   * ```javascript\n   * let visa23 = oneallenbrainontology.getRegionByFullName('anterior area, layer 2/3')\n   * ```\n   *\n   * @param {string} name - full name of the brain region\n   * @return {Object} the brain region metadata\n   */\n  static getRegionByFullName(name) {\n    let usableName = name.toLowerCase().trim()\n    if(usableName in indexPerName){\n      return indexPerName[usableName]\n    }\n    return null\n  }\n\n\n  /**\n   * Get a region by its strict acronym (case insensitive)\n   *\n   * ```javascript\n   * let visa23 = oneallenbrainontology.getRegionByAcronym('visa2/3')\n   * ```\n   *\n   * @param {string} ac - acronym of the brain region\n   * @return {Object} the brain region metadata\n   */\n  static getRegionByAcronym(ac) {\n    let usableAc = ac.toLowerCase().trim()\n    if(usableAc in indexPerAcronym){\n      return indexPerAcronym[usableAc]\n    }\n    return null\n  }\n\n  /**\n   * Get a region by its id\n   *\n   * ```javascript\n   * let visa23 = oneallenbrainontology.getRegionById(312782554)\n   * ```\n   *\n   * @param {number} id - id of the brain region\n   * @return {Object} the brain region metadata\n   */\n  static getRegionById(id) {\n    if(id in indexPerId){\n      return indexPerId[id]\n    }\n    return null\n  }\n\n\n\n  /**\n   * Get the list of child regions given the ID of the parent region.\n   * @param {string|number} parentId - the id of the parent node\n   *\n   * ```javascript\n   * let children = oneallenbrainontology.getChildRegionsFromId(997)\n   * ```\n   * @return {Array} array of regions, alphabetically sorted by name.\n   * If the parentId does not exist or if it has no children, then an empty array is returned.\n   */\n  static getChildRegionsFromId(parentId){\n    if(!(parentId in indexPerId)){\n      return []\n    }\n\n    let parentRegion = indexPerId[parentId]\n    return parentRegion.children_structure_id\n            .map(id => indexPerId[id])\n            .sort((a, b) => a.name < b.name ? -1 : 1)\n  }\n\n\n  /**\n   * Get the parent region given the id of a child.\n   * @param {string|number} childId - the id of the child region to get the parent of\n   *\n   * ```javascript\n   * let parent = oneallenbrainontology.getParentRegionFromId(304325711)\n   * ```\n   *\n   * @return {Object|null} the parent region or null if no parent (aka. root node)\n   */\n  static getParentRegionFromId(childId){\n    if(!(childId in indexPerId) || childId === rootNodeId){\n      return null\n    }\n\n    let childRegion = indexPerId[childId]\n    return indexPerId[childRegion.parent_structure_id]\n  }\n\n\n  /**\n   * Get the list of IDs of all the brain regions that are at a higher level than\n   * the one given.\n   * @param {number|string} id - id of the brain region to find the ancestors of\n   * @param {object} options - the options object\n   * @param {boolean} options.omitChild - if true, the id provided as argument will not be part of the list (dafault: false, the one provided is part of the list)\n   * @param {boolean} options.rootFirst - if true, the order will be starting with the root node, if false, the list will be ending by the root (default: false)\n   * @return {array} of region IDs in ascending order (default) or descending order\n   *\n   * ```javascript\n   * let ancestors = oneallenbrainontology.getAllAncestorsFromId(159, {\n   *   rootFirst: true,\n   *   omitChild: false\n   *  })\n   *\n   * ancestors.forEach( regionId => {\n   *   console.log(oneallenbrainontology.getRegionById(regionId))\n   * })\n   * ```\n   */\n  static getAllAncestorsFromId(id, options = {}){\n    if(!(id in indexPerId)){\n      return null\n    }\n\n    let omitChild = \"omitChild\" in options ? options.omitChild : false\n    let rootFirst = \"rootFirst\" in options ? options.rootFirst : false\n\n    let region = indexPerId[id]\n    let ancestors = []\n\n    if(!omitChild){\n      ancestors.push(id)\n    }\n\n    while(region.parent_structure_id){\n      let parentId = region.parent_structure_id\n      ancestors.push(parentId)\n      region = indexPerId[parentId]\n    }\n\n    if(rootFirst){\n      ancestors.reverse()\n    }\n    return ancestors\n  }\n\n\n  /**\n   *\n   */\n  static getAllChildrenFromID(id){\n    // TODO\n  }\n\n\n  /**\n   * Search a region using multiple words.\n   * There is possibly multiple matches when all the words of the query are found\n   * in the [full name + acronym + id] of a brain region\n   *\n   * ```javascript\n   * let cerebellumRelated = oneallenbrainontology.findRegion('cerebel')\n   *\n   * let layer23Related = oneallenbrainontology.findRegion('layer 2/3')\n   * ```\n   *\n   * @param {string} query - possibly multiple words\n   * @return {array} brain regions or empty if not found\n   */\n  static findRegion(query){\n    let queryWords = query.split(' ').map(s => s.toLocaleLowerCase())\n\n    let listOfRegions = listOfFullIndex\n      .filter(function(elem) {\n        return queryWords.every(word => !!~elem.indexOf(word))\n      })\n      .sort() // we prefer alphabetical order\n      .map(function(acr) {\n        return indexPerAll[acr]\n      })\n\n    return listOfRegions\n  }\n\n\n\n}\n\nexport default OneAllenBrainOntology\n"],"names":["name","acronym","id"],"mappings":"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"}