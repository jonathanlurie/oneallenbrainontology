{"version":3,"file":"oneallenbrainontology.js","sources":["../node_modules/slugify/index.js","../src/OneAllenBrainOntology.js"],"sourcesContent":["\n;(function (name, root, factory) {\n  if (typeof exports === 'object') {\n    module.exports = factory()\n    module.exports['default'] = factory()\n  }\n  /* istanbul ignore next */\n  else if (typeof define === 'function' && define.amd) {\n    define(factory)\n  }\n  else {\n    root[name] = factory()\n  }\n}('slugify', this, function () {\n  /* eslint-disable */\n  var charMap = JSON.parse('{\"$\":\"dollar\",\"%\":\"percent\",\"&\":\"and\",\"<\":\"less\",\">\":\"greater\",\"|\":\"or\",\"¢\":\"cent\",\"£\":\"pound\",\"¤\":\"currency\",\"¥\":\"yen\",\"©\":\"(c)\",\"ª\":\"a\",\"®\":\"(r)\",\"º\":\"o\",\"À\":\"A\",\"Á\":\"A\",\"Â\":\"A\",\"Ã\":\"A\",\"Ä\":\"A\",\"Å\":\"A\",\"Æ\":\"AE\",\"Ç\":\"C\",\"È\":\"E\",\"É\":\"E\",\"Ê\":\"E\",\"Ë\":\"E\",\"Ì\":\"I\",\"Í\":\"I\",\"Î\":\"I\",\"Ï\":\"I\",\"Ð\":\"D\",\"Ñ\":\"N\",\"Ò\":\"O\",\"Ó\":\"O\",\"Ô\":\"O\",\"Õ\":\"O\",\"Ö\":\"O\",\"Ø\":\"O\",\"Ù\":\"U\",\"Ú\":\"U\",\"Û\":\"U\",\"Ü\":\"U\",\"Ý\":\"Y\",\"Þ\":\"TH\",\"ß\":\"ss\",\"à\":\"a\",\"á\":\"a\",\"â\":\"a\",\"ã\":\"a\",\"ä\":\"a\",\"å\":\"a\",\"æ\":\"ae\",\"ç\":\"c\",\"è\":\"e\",\"é\":\"e\",\"ê\":\"e\",\"ë\":\"e\",\"ì\":\"i\",\"í\":\"i\",\"î\":\"i\",\"ï\":\"i\",\"ð\":\"d\",\"ñ\":\"n\",\"ò\":\"o\",\"ó\":\"o\",\"ô\":\"o\",\"õ\":\"o\",\"ö\":\"o\",\"ø\":\"o\",\"ù\":\"u\",\"ú\":\"u\",\"û\":\"u\",\"ü\":\"u\",\"ý\":\"y\",\"þ\":\"th\",\"ÿ\":\"y\",\"Ā\":\"A\",\"ā\":\"a\",\"Ă\":\"A\",\"ă\":\"a\",\"Ą\":\"A\",\"ą\":\"a\",\"Ć\":\"C\",\"ć\":\"c\",\"Č\":\"C\",\"č\":\"c\",\"Ď\":\"D\",\"ď\":\"d\",\"Đ\":\"DJ\",\"đ\":\"dj\",\"Ē\":\"E\",\"ē\":\"e\",\"Ė\":\"E\",\"ė\":\"e\",\"Ę\":\"e\",\"ę\":\"e\",\"Ě\":\"E\",\"ě\":\"e\",\"Ğ\":\"G\",\"ğ\":\"g\",\"Ģ\":\"G\",\"ģ\":\"g\",\"Ĩ\":\"I\",\"ĩ\":\"i\",\"Ī\":\"i\",\"ī\":\"i\",\"Į\":\"I\",\"į\":\"i\",\"İ\":\"I\",\"ı\":\"i\",\"Ķ\":\"k\",\"ķ\":\"k\",\"Ļ\":\"L\",\"ļ\":\"l\",\"Ľ\":\"L\",\"ľ\":\"l\",\"Ł\":\"L\",\"ł\":\"l\",\"Ń\":\"N\",\"ń\":\"n\",\"Ņ\":\"N\",\"ņ\":\"n\",\"Ň\":\"N\",\"ň\":\"n\",\"Ő\":\"O\",\"ő\":\"o\",\"Œ\":\"OE\",\"œ\":\"oe\",\"Ŕ\":\"R\",\"ŕ\":\"r\",\"Ř\":\"R\",\"ř\":\"r\",\"Ś\":\"S\",\"ś\":\"s\",\"Ş\":\"S\",\"ş\":\"s\",\"Š\":\"S\",\"š\":\"s\",\"Ţ\":\"T\",\"ţ\":\"t\",\"Ť\":\"T\",\"ť\":\"t\",\"Ũ\":\"U\",\"ũ\":\"u\",\"Ū\":\"u\",\"ū\":\"u\",\"Ů\":\"U\",\"ů\":\"u\",\"Ű\":\"U\",\"ű\":\"u\",\"Ų\":\"U\",\"ų\":\"u\",\"Ź\":\"Z\",\"ź\":\"z\",\"Ż\":\"Z\",\"ż\":\"z\",\"Ž\":\"Z\",\"ž\":\"z\",\"ƒ\":\"f\",\"Ơ\":\"O\",\"ơ\":\"o\",\"Ư\":\"U\",\"ư\":\"u\",\"ǈ\":\"LJ\",\"ǉ\":\"lj\",\"ǋ\":\"NJ\",\"ǌ\":\"nj\",\"Ș\":\"S\",\"ș\":\"s\",\"Ț\":\"T\",\"ț\":\"t\",\"˚\":\"o\",\"Ά\":\"A\",\"Έ\":\"E\",\"Ή\":\"H\",\"Ί\":\"I\",\"Ό\":\"O\",\"Ύ\":\"Y\",\"Ώ\":\"W\",\"ΐ\":\"i\",\"Α\":\"A\",\"Β\":\"B\",\"Γ\":\"G\",\"Δ\":\"D\",\"Ε\":\"E\",\"Ζ\":\"Z\",\"Η\":\"H\",\"Θ\":\"8\",\"Ι\":\"I\",\"Κ\":\"K\",\"Λ\":\"L\",\"Μ\":\"M\",\"Ν\":\"N\",\"Ξ\":\"3\",\"Ο\":\"O\",\"Π\":\"P\",\"Ρ\":\"R\",\"Σ\":\"S\",\"Τ\":\"T\",\"Υ\":\"Y\",\"Φ\":\"F\",\"Χ\":\"X\",\"Ψ\":\"PS\",\"Ω\":\"W\",\"Ϊ\":\"I\",\"Ϋ\":\"Y\",\"ά\":\"a\",\"έ\":\"e\",\"ή\":\"h\",\"ί\":\"i\",\"ΰ\":\"y\",\"α\":\"a\",\"β\":\"b\",\"γ\":\"g\",\"δ\":\"d\",\"ε\":\"e\",\"ζ\":\"z\",\"η\":\"h\",\"θ\":\"8\",\"ι\":\"i\",\"κ\":\"k\",\"λ\":\"l\",\"μ\":\"m\",\"ν\":\"n\",\"ξ\":\"3\",\"ο\":\"o\",\"π\":\"p\",\"ρ\":\"r\",\"ς\":\"s\",\"σ\":\"s\",\"τ\":\"t\",\"υ\":\"y\",\"φ\":\"f\",\"χ\":\"x\",\"ψ\":\"ps\",\"ω\":\"w\",\"ϊ\":\"i\",\"ϋ\":\"y\",\"ό\":\"o\",\"ύ\":\"y\",\"ώ\":\"w\",\"Ё\":\"Yo\",\"Ђ\":\"DJ\",\"Є\":\"Ye\",\"І\":\"I\",\"Ї\":\"Yi\",\"Ј\":\"J\",\"Љ\":\"LJ\",\"Њ\":\"NJ\",\"Ћ\":\"C\",\"Џ\":\"DZ\",\"А\":\"A\",\"Б\":\"B\",\"В\":\"V\",\"Г\":\"G\",\"Д\":\"D\",\"Е\":\"E\",\"Ж\":\"Zh\",\"З\":\"Z\",\"И\":\"I\",\"Й\":\"J\",\"К\":\"K\",\"Л\":\"L\",\"М\":\"M\",\"Н\":\"N\",\"О\":\"O\",\"П\":\"P\",\"Р\":\"R\",\"С\":\"S\",\"Т\":\"T\",\"У\":\"U\",\"Ф\":\"F\",\"Х\":\"H\",\"Ц\":\"C\",\"Ч\":\"Ch\",\"Ш\":\"Sh\",\"Щ\":\"Sh\",\"Ъ\":\"U\",\"Ы\":\"Y\",\"Ь\":\"\",\"Э\":\"E\",\"Ю\":\"Yu\",\"Я\":\"Ya\",\"а\":\"a\",\"б\":\"b\",\"в\":\"v\",\"г\":\"g\",\"д\":\"d\",\"е\":\"e\",\"ж\":\"zh\",\"з\":\"z\",\"и\":\"i\",\"й\":\"j\",\"к\":\"k\",\"л\":\"l\",\"м\":\"m\",\"н\":\"n\",\"о\":\"o\",\"п\":\"p\",\"р\":\"r\",\"с\":\"s\",\"т\":\"t\",\"у\":\"u\",\"ф\":\"f\",\"х\":\"h\",\"ц\":\"c\",\"ч\":\"ch\",\"ш\":\"sh\",\"щ\":\"sh\",\"ъ\":\"u\",\"ы\":\"y\",\"ь\":\"\",\"э\":\"e\",\"ю\":\"yu\",\"я\":\"ya\",\"ё\":\"yo\",\"ђ\":\"dj\",\"є\":\"ye\",\"і\":\"i\",\"ї\":\"yi\",\"ј\":\"j\",\"љ\":\"lj\",\"њ\":\"nj\",\"ћ\":\"c\",\"џ\":\"dz\",\"Ґ\":\"G\",\"ґ\":\"g\",\"฿\":\"baht\",\"ა\":\"a\",\"ბ\":\"b\",\"გ\":\"g\",\"დ\":\"d\",\"ე\":\"e\",\"ვ\":\"v\",\"ზ\":\"z\",\"თ\":\"t\",\"ი\":\"i\",\"კ\":\"k\",\"ლ\":\"l\",\"მ\":\"m\",\"ნ\":\"n\",\"ო\":\"o\",\"პ\":\"p\",\"ჟ\":\"zh\",\"რ\":\"r\",\"ს\":\"s\",\"ტ\":\"t\",\"უ\":\"u\",\"ფ\":\"f\",\"ქ\":\"k\",\"ღ\":\"gh\",\"ყ\":\"q\",\"შ\":\"sh\",\"ჩ\":\"ch\",\"ც\":\"ts\",\"ძ\":\"dz\",\"წ\":\"ts\",\"ჭ\":\"ch\",\"ხ\":\"kh\",\"ჯ\":\"j\",\"ჰ\":\"h\",\"ẞ\":\"SS\",\"Ạ\":\"A\",\"ạ\":\"a\",\"Ả\":\"A\",\"ả\":\"a\",\"Ấ\":\"A\",\"ấ\":\"a\",\"Ầ\":\"A\",\"ầ\":\"a\",\"Ẩ\":\"A\",\"ẩ\":\"a\",\"Ẫ\":\"A\",\"ẫ\":\"a\",\"Ậ\":\"A\",\"ậ\":\"a\",\"Ắ\":\"A\",\"ắ\":\"a\",\"Ằ\":\"A\",\"ằ\":\"a\",\"Ẳ\":\"A\",\"ẳ\":\"a\",\"Ẵ\":\"A\",\"ẵ\":\"a\",\"Ặ\":\"A\",\"ặ\":\"a\",\"Ẹ\":\"E\",\"ẹ\":\"e\",\"Ẻ\":\"E\",\"ẻ\":\"e\",\"Ẽ\":\"E\",\"ẽ\":\"e\",\"Ế\":\"E\",\"ế\":\"e\",\"Ề\":\"E\",\"ề\":\"e\",\"Ể\":\"E\",\"ể\":\"e\",\"Ễ\":\"E\",\"ễ\":\"e\",\"Ệ\":\"E\",\"ệ\":\"e\",\"Ỉ\":\"I\",\"ỉ\":\"i\",\"Ị\":\"I\",\"ị\":\"i\",\"Ọ\":\"O\",\"ọ\":\"o\",\"Ỏ\":\"O\",\"ỏ\":\"o\",\"Ố\":\"O\",\"ố\":\"o\",\"Ồ\":\"O\",\"ồ\":\"o\",\"Ổ\":\"O\",\"ổ\":\"o\",\"Ỗ\":\"O\",\"ỗ\":\"o\",\"Ộ\":\"O\",\"ộ\":\"o\",\"Ớ\":\"O\",\"ớ\":\"o\",\"Ờ\":\"O\",\"ờ\":\"o\",\"Ở\":\"O\",\"ở\":\"o\",\"Ỡ\":\"O\",\"ỡ\":\"o\",\"Ợ\":\"O\",\"ợ\":\"o\",\"Ụ\":\"U\",\"ụ\":\"u\",\"Ủ\":\"U\",\"ủ\":\"u\",\"Ứ\":\"U\",\"ứ\":\"u\",\"Ừ\":\"U\",\"ừ\":\"u\",\"Ử\":\"U\",\"ử\":\"u\",\"Ữ\":\"U\",\"ữ\":\"u\",\"Ự\":\"U\",\"ự\":\"u\",\"Ỳ\":\"Y\",\"ỳ\":\"y\",\"Ỵ\":\"Y\",\"ỵ\":\"y\",\"Ỷ\":\"Y\",\"ỷ\":\"y\",\"Ỹ\":\"Y\",\"ỹ\":\"y\",\"‘\":\"\\'\",\"’\":\"\\'\",\"“\":\"\\\\\\\"\",\"”\":\"\\\\\\\"\",\"†\":\"+\",\"•\":\"*\",\"…\":\"...\",\"₠\":\"ecu\",\"₢\":\"cruzeiro\",\"₣\":\"french franc\",\"₤\":\"lira\",\"₥\":\"mill\",\"₦\":\"naira\",\"₧\":\"peseta\",\"₨\":\"rupee\",\"₩\":\"won\",\"₪\":\"new shequel\",\"₫\":\"dong\",\"€\":\"euro\",\"₭\":\"kip\",\"₮\":\"tugrik\",\"₯\":\"drachma\",\"₰\":\"penny\",\"₱\":\"peso\",\"₲\":\"guarani\",\"₳\":\"austral\",\"₴\":\"hryvnia\",\"₵\":\"cedi\",\"₹\":\"indian rupee\",\"₽\":\"russian ruble\",\"₿\":\"bitcoin\",\"℠\":\"sm\",\"™\":\"tm\",\"∂\":\"d\",\"∆\":\"delta\",\"∑\":\"sum\",\"∞\":\"infinity\",\"♥\":\"love\",\"元\":\"yuan\",\"円\":\"yen\",\"﷼\":\"rial\"}')\n  /* eslint-enable */\n\n  function replace (string, options) {\n    if (typeof string !== 'string') {\n      throw new Error('slugify: string argument expected')\n    }\n\n    options = (typeof options === 'string')\n      ? {replacement: options}\n      : options || {}\n\n    var slug = string.split('')\n      .reduce(function (result, ch) {\n        return result + (charMap[ch] || ch)\n          // allowed\n          .replace(options.remove || /[^\\w\\s$*_+~.()'\"!\\-:@]/g, '')\n      }, '')\n      // trim leading/trailing spaces\n      .trim()\n      // convert spaces\n      .replace(/[-\\s]+/g, options.replacement || '-')\n\n    return options.lower ? slug.toLowerCase() : slug\n  }\n\n  replace.extend = function (customMap) {\n    for (var key in customMap) {\n      charMap[key] = customMap[key]\n    }\n  }\n\n  return replace\n}))\n","import slugify from 'slugify'\n\nimport one from './data/1.json'\nimport ccfv2_10um_regionVolumes from './data/allen_ccfv2_10um'\nimport ccfv2_25um_regionVolumes from './data/allen_ccfv2_25um'\nimport ccfv3_10um_regionVolumes from './data/allen_ccfv3_10um'\nimport ccfv3_25um_regionVolumes from './data/allen_ccfv3_25um'\n\n// otherwise things sur as \"layer 2/3\" will become \"layer_23\"\n// while we rather want \"layer_2_3\"\nslugify.extend({'/': '_'})\n\nlet regionVolumes = {\n  'ccfv2': {\n    '10um': ccfv2_10um_regionVolumes,\n    '25um': ccfv2_25um_regionVolumes\n  },\n  'ccfv3': {\n    '10um': ccfv3_10um_regionVolumes,\n    '25um': ccfv3_25um_regionVolumes\n  }\n}\n\nlet flatList = []\nlet listOfNames = []\nlet listOfAcronyms = []\nlet listOfIds = []\nlet listOfFullIndex = []\nlet indexPerId = {}\nlet indexPerName = {}\nlet indexPerAcronym = {}\nlet indexPerSlug = {}\nlet indexPerAll = {}\nlet rootNodeId = null\n\n\nfunction buildIndex(){\n  let nodesToExplore = [one]\n\n  while(nodesToExplore.length) {\n    let node = nodesToExplore.pop()\n    let name = node.name.toLowerCase().trim()\n    let acronym = node.acronym.toLowerCase().trim()\n    let id = node.id\n\n    if(node.parent_structure_id === null){\n      rootNodeId = id\n    }\n\n    node.children_structure_id = []\n\n    node.slug = slugify(name, {\n      replacement: '_',    // replace spaces with replacement\n      // remove: null,        // regex to remove characters\n      lower: true          // result in lower case\n    })\n\n    flatList.push(node)\n    indexPerId[id] = node\n    indexPerName[name] = node\n    indexPerAcronym[acronym] = node\n    indexPerSlug[node.slug] = node\n    let fullIndex = `${name} ${acronym} ${id}`\n    indexPerAll[fullIndex] = node\n    listOfFullIndex.push(fullIndex)\n    listOfNames.push(name)\n    listOfAcronyms.push(acronym)\n    listOfIds.push(id)\n\n    node.isLeaf = node.children.length === 0\n\n    // adding the children to the list\n    for(let i=0; i<node.children.length; i++){\n      let child = node.children[i]\n      node.children_structure_id.push(child.id)\n      nodesToExplore.push(child)\n    }\n\n    // we dont want to keep the nested structure\n    // as it's not going to be like that in Nexus\n    delete node.children\n  }\n}\n\nbuildIndex()\n\n\n/**\n * **OneAllenBrainOntology** provides a set of convenience methods related to searching\n * and indexing mouse brain region from the `1.json` of the **Allen Institute for Brain Science** (AIBS).\n * It contains only static methods, thus no object needs to be\n * instantiated and methods can be called directly.\n *\n * In addition, this library contains the listing of all the brain region computed volumes\n * from the volumetric files `annotation_10.nrrd` and `annotation_25.nrrd` for both **ccfv2** (2014)\n * and **ccfv3** (2017). The method `getRegionVolume(...)` makes it easy to get the\n * volume of any given brain region (in cubic micrometer) and let you specify the version and\n * resolution of the atlas.\n *\n * Example:\n *\n * ```javascript\n * import oneallenbrainontology from 'oneallenbrainontology'\n * let allRegionNames = oneallenbrainontology.getAllRegionNames()\n * ```\n *\n * When querying a specific brain region, the returned value if found will be of the form:\n * ```javascript\n * {\n *   \"id\": 567,\n *   \"atlas_id\": 70,\n *   \"ontology_id\": 1,\n *   \"acronym\": \"CH\",\n *   \"name\": \"Cerebrum\",\n *   \"color_hex_triplet\": \"B0F0FF\",\n *   \"graph_order\": 2,\n *   \"st_level\": 2,\n *   \"hemisphere_id\": 3,\n *   \"parent_structure_id\": 8,\n *   \"children_structure_id\": [\n *     688,\n *     623\n *   ],\n *   \"isLeaf\": false,\n *   \"slug\": \"cerebrum\"\n * }\n * ```\n *\n * Where\n * - `id`: **number** the identifier of the brain region (given by AIBS)\n * - `acronym`: **string** is the short unique name for a region (given by AIBS)\n * - `name`: **string** full name of the brain region (given by AIBS)\n * - `color_hex_triplet`: **string** the color of the brain region in hexadecimal (given by AIBS)\n * - `parent_structure_id`: **number** the `id` of the parent brain structure (given by AIBS)\n * - `children_structure_id`: **[number]**list `id` this region is the parent of (AIBS gives a list of nodes instead of a list of `id`, but here the whole tree has been flattened)\n * - `isLeaf`: **boolean** says if the brain region is a leaf of the tree (`true`, it does not have child region) or if it has child brain region (`false`). Not that this could easily be deduced from length of the `children_structure_id` list.\n * - `slug`: **string** a URL compatible name\n * - `atlas_id`: **number** some field given by AIBS (no more info about it)\n * - `ontology_id`: **number** some field given by AIBS (no more info about it)\n * - `graph_order`: **number** some field given by AIBS (no more info about it)\n * - `st_level`: **number** some field given by the AIBS (no more info about it)\n * - `hemisphere_id`: **number** some field given by the AIBS (no more info about it)\n * ---\n */\nclass OneAllenBrainOntology {\n\n  /**\n   * Get the root node, which is the most top level node and has no parent.\n   * @return {Object} the node\n   *\n   * @example\n   * let rootNode = oneallenbrainontology.getRootNode()\n   */\n  static getRootNode(){\n    return indexPerId[rootNodeId]\n  }\n\n\n  /**\n   * Get the full list of region names (lowercase) as an array\n   * @return {Array}\n   *\n   * @example\n   * let allRegionNames = oneallenbrainontology.getAllRegionNames()\n   */\n  static getAllRegionNames(){\n    return listOfNames\n  }\n\n\n  /**\n   * Get the full list of region acronyms (lowercase) as an array\n   * @return {Array}\n   *\n   * @example\n   * let allRegionAcronyms = oneallenbrainontology.getAllRegionAcronyms()\n   */\n  static getAllRegionAcronyms(){\n    return listOfAcronyms\n  }\n\n\n  /**\n   * Get the full list of region ID (integers) as an array\n   * @return {Array}\n   *\n   * @example\n   * let allBrainRegionId = oneallenbrainontology.getAllRegionId()\n   */\n  static getAllRegionId(){\n    return listOfIds\n  }\n\n\n  /**\n   * Get a region by its strict full name (case insensitive)\n   * @param {string} name - full name of the brain region\n   * @return {Object} the brain region metadata\n   *\n   * @example\n   * let visa23 = oneallenbrainontology.getRegionByFullName('anterior area, layer 2/3')\n   */\n  static getRegionByFullName(name) {\n    let usableName = name.toLowerCase().trim()\n    if(usableName in indexPerName){\n      return indexPerName[usableName]\n    }\n    return null\n  }\n\n\n  /**\n   * Get a region by its strict acronym (case insensitive)\n   * @param {string} ac - acronym of the brain region\n   * @return {Object} the brain region metadata\n   *\n   * @example\n   * let visa23 = oneallenbrainontology.getRegionByAcronym('visa2/3')\n   */\n  static getRegionByAcronym(ac) {\n    let usableAc = ac.toLowerCase().trim()\n    if(usableAc in indexPerAcronym){\n      return indexPerAcronym[usableAc]\n    }\n    return null\n  }\n\n\n  /**\n   * Get a region by its strict slug (case insensitive)\n   * @param {string} slug - slug of the brain region\n   * @return {Object} the brain region metadata\n   *\n   * @example\n   * let orbL23 = oneallenbrainontology.getRegionBySlug('orbital_area_layer_2_3')\n   */\n  static getRegionBySlug(slug) {\n    let usableSlug = slug.toLowerCase().trim()\n    if(usableSlug in indexPerSlug){\n      return indexPerSlug[usableSlug]\n    }\n    return null\n  }\n\n\n  /**\n   * Get a region by its id\n   * @param {number} id - id of the brain region\n   * @return {Object} the brain region metadata\n   *\n   * @example\n   * let visa23 = oneallenbrainontology.getRegionById(312782554)\n   */\n  static getRegionById(id) {\n    if(id in indexPerId){\n      return indexPerId[id]\n    }\n    return null\n  }\n\n\n  /**\n   * Get the list of child regions given the ID of the parent region.\n   * @param {string|number} parentId - the id of the parent node\n   * @return {Array} array of regions, alphabetically sorted by name.\n   * If the parentId does not exist or if it has no children, then an empty array is returned.\n   *\n   * @example\n   * let children = oneallenbrainontology.getChildRegionsFromId(997)\n   *\n   */\n  static getChildRegionsFromId(parentId){\n    if(!(parentId in indexPerId)){\n      return []\n    }\n\n    let parentRegion = indexPerId[parentId]\n    return parentRegion.children_structure_id\n            .map(id => indexPerId[id])\n            .sort((a, b) => a.name < b.name ? -1 : 1)\n  }\n\n\n  /**\n   * Get the parent region given the id of a child.\n   * @param {string|number} childId - the id of the child region to get the parent of\n   * @return {Object|null} the parent region or null if no parent (aka. root node)\n   *\n   * @example\n   * let parent = oneallenbrainontology.getParentRegionFromId(304325711)\n   */\n  static getParentRegionFromId(childId){\n    if(!(childId in indexPerId) || childId === rootNodeId){\n      return null\n    }\n\n    let childRegion = indexPerId[childId]\n    return indexPerId[childRegion.parent_structure_id]\n  }\n\n\n  /**\n   * Get the list of IDs of all the brain regions that are at a higher level than\n   * the one given.\n   * @param {number|string} id - id of the brain region to find the ancestors of\n   * @param {object} options - the options object\n   * @param {boolean} options.omitChild - if true, the id provided as argument will not be part of the list (dafault: false, the one provided is part of the list)\n   * @param {boolean} options.rootFirst - if true, the order will be starting with the root node, if false, the list will be ending by the root (default: false)\n   * @return {array} of region IDs in ascending order (default) or descending order\n   *\n   * @example\n   * let ancestors = oneallenbrainontology.getAscendantsFromId(159, {\n   *   rootFirst: true,\n   *   omitChild: false\n   *  })\n   */\n  static getAscendantsFromId(id, options = {}){\n    if(!(id in indexPerId)){\n      return null\n    }\n\n    let omitChild = \"omitChild\" in options ? options.omitChild : false\n    let rootFirst = \"rootFirst\" in options ? options.rootFirst : false\n\n    let region = indexPerId[id]\n    let ancestors = []\n\n    if(!omitChild){\n      ancestors.push(id)\n    }\n\n    while(region.parent_structure_id){\n      let parentId = region.parent_structure_id\n      ancestors.push(parentId)\n      region = indexPerId[parentId]\n    }\n\n    if(rootFirst){\n      ancestors.reverse()\n    }\n    return ancestors.map(ancestorId => indexPerId[ancestorId])\n  }\n\n\n  /**\n   * Get all the descendants from a given brain region. The descendants are the\n   * children and all the children of the children recursively until the leaf nodes\n   * are reached.\n   * @param {number|string} id - id of the region to list the descendants of\n   * @param {opbject} options - the option object\n   * @param {boolean} options.keepCurrent - if true, the region given as argument will also be added, if false, only the descendants will be added (default: false)\n   * @param {boolean} options.leafOnly - if true, only the leaf region will be added (a leaf is a region that has no child) (default: false)\n   * @return {array} the descendants\n   *\n   * @example\n   * let allChildren = oneallenbrainontology.getDescendantsFromId(997, { // 997 is the top region, the one that contains all the others\n   *   keepCurrent: true, // this one will actually not apply as 997 is not a leaf\n   *   leafOnly: true     // and here we want only the leaf\n   * })\n   */\n  static getDescendantsFromId(id, options={}){\n    if(!(id in indexPerId)){\n      return null\n    }\n\n    let keepCurrent = 'keepCurrent' in options ? options.keepCurrent : false\n    let leafOnly = 'leafOnly' in options ? options.leafOnly : false\n    let parentNode =  indexPerId[id]\n    let allChildren = []\n\n    if(keepCurrent){\n      if((leafOnly && parentNode.isLeaf) || !leafOnly){\n        allChildren.push(parentNode)\n      }\n    }\n\n    function exploreChild(node){\n      node.children_structure_id.forEach(childId => {\n        let childNode = indexPerId[childId]\n        if((leafOnly && childNode.isLeaf) || !leafOnly){\n          allChildren.push(childNode)\n        }\n        exploreChild(childNode)\n      })\n    }\n\n    exploreChild(parentNode)\n    return allChildren\n  }\n\n\n  /**\n   * Gives the volume in um^3 (cubic micro-meter) of the given brain region,\n   * using some builtin atlas data.\n   * Pro-tip: divide by 1E9 to get the volume in mm^3 and again by 1E3 for cm^3.\n   * @param {number|string} id - the id of the brain region to get the volume of\n   * @param {object} options - the option object\n   * @param {string} options.atlas - 'ccfv2' or 'ccfv3' (default: 'ccfv3')\n   * @param {string} options.resolution - the resolution of the voletric data the volume were computed from. '10um' or '25um' (default: '10um')\n   * @return {number} the volume of the brain region in cubic micro-meter\n   *\n   * @example\n   * let volume = oneallenbrainontology.getRegionVolume(997, {\n   *   atlas: 'ccfv3',\n   *   resolution: '10um'\n   * })\n   * console.log(`The whole mouse brain has a volume of ${volume/1E12} cm^3`)\n   */\n  static getRegionVolume(id, options={}){\n    if(!(id in indexPerId)){\n      return null\n    }\n\n    let atlasVersion = 'atlas' in options ? options.atlas : 'ccfv3'\n    let resolution = 'resolution' in options ? options.resolution : '10um'\n\n    let regionVolumesOfChoice = null\n    try{\n      regionVolumesOfChoice = regionVolumes[atlasVersion][resolution]\n    } catch(e){\n      throw new Error(`The atlas ${atlasVersion} at resolution ${resolution} does not exist.`)\n      return null\n    }\n\n    let descendants = OneAllenBrainOntology.getDescendantsFromId(id, {\n      keepCurrent: true\n    })\n\n    let totalVolume = 0\n    for(let i= 0; i<descendants.length; i++){\n      totalVolume += regionVolumesOfChoice[descendants[i].id ] || 0\n    }\n\n    return totalVolume\n  }\n\n\n\n  /**\n   * Search a region using multiple words.\n   * There is possibly multiple matches when all the words of the query are found\n   * in the [full name + acronym + id] of a brain region\n   * @param {string} query - possibly multiple words\n   * @return {array} brain regions or empty if not found\n   *\n   * @example\n   * let cerebellumRelated = oneallenbrainontology.findRegion('cerebel')\n   * let layer23Related = oneallenbrainontology.findRegion('layer 2/3')\n   */\n  static findRegion(query){\n    let queryWords = query.split(' ').map(s => s.toLocaleLowerCase())\n\n    let listOfRegions = listOfFullIndex\n      .filter(function(elem) {\n        return queryWords.every(word => !!~elem.indexOf(word))\n      })\n      .sort() // we prefer alphabetical order\n      .map(function(acr) {\n        return indexPerAll[acr]\n      })\n\n    return listOfRegions\n  }\n\n\n\n}\n\nexport default OneAllenBrainOntology\n"],"names":["this","name","acronym","id"],"mappings":"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"}