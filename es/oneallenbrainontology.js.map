{"version":3,"file":"oneallenbrainontology.js","sources":["../src/OneAllenBrainOntology.js"],"sourcesContent":["import slugify from 'slugify'\n\nimport one from './data/1.json'\nimport ccfv2_10um_regionVolumes from './data/allen_ccfv2_10um'\nimport ccfv2_25um_regionVolumes from './data/allen_ccfv2_25um'\nimport ccfv3_10um_regionVolumes from './data/allen_ccfv3_10um'\nimport ccfv3_25um_regionVolumes from './data/allen_ccfv3_25um'\n\n\n\n// otherwise things sur as \"layer 2/3\" will become \"layer_23\"\n// while we rather want \"layer_2_3\"\nslugify.extend({'/': '_'})\n\nlet rawData = JSON.parse(JSON.stringify(one))\n\nconsole.log(rawData)\n\nlet regionVolumes = {\n  'ccfv2': {\n    '10um': ccfv2_10um_regionVolumes,\n    '25um': ccfv2_25um_regionVolumes\n  },\n  'ccfv3': {\n    '10um': ccfv3_10um_regionVolumes,\n    '25um': ccfv3_25um_regionVolumes\n  }\n}\n\nlet flatList = []\nlet listOfNames = []\nlet listOfAcronyms = []\nlet listOfIds = []\nlet listOfFullIndex = []\nlet indexPerId = {}\nlet indexPerName = {}\nlet indexPerAcronym = {}\nlet indexPerSlug = {}\nlet indexPerAll = {}\nlet rootNodeId = null\n\n\nfunction buildIndex(){\n  let nodesToExplore = [one]\n\n  while(nodesToExplore.length) {\n    let node = nodesToExplore.pop()\n    let name = node.name.toLowerCase().trim()\n    let acronym = node.acronym.toLowerCase().trim()\n    let id = node.id\n\n    if(node.parent_structure_id === null){\n      rootNodeId = id\n    }\n\n    node.children_structure_id = []\n\n    node.slug = slugify(name, {\n      replacement: '_',    // replace spaces with replacement\n      // remove: null,        // regex to remove characters\n      lower: true          // result in lower case\n    })\n\n    flatList.push(node)\n    indexPerId[id] = node\n    indexPerName[name] = node\n    indexPerAcronym[acronym] = node\n    indexPerSlug[node.slug] = node\n    let fullIndex = `${name} ${acronym} ${id}`\n    indexPerAll[fullIndex] = node\n    listOfFullIndex.push(fullIndex)\n    listOfNames.push(name)\n    listOfAcronyms.push(acronym)\n    listOfIds.push(id)\n\n    node.isLeaf = node.children.length === 0\n\n    // adding the children to the list\n    for(let i=0; i<node.children.length; i++){\n      let child = node.children[i]\n      node.children_structure_id.push(child.id)\n      nodesToExplore.push(child)\n    }\n\n    // we dont want to keep the nested structure\n    // as it's not going to be like that in Nexus\n    delete node.children\n  }\n}\n\nbuildIndex()\n\n\n/**\n * **OneAllenBrainOntology** provides a set of convenience methods related to searching\n * and indexing mouse brain region from the `1.json` of the **Allen Institute for Brain Science** (AIBS).\n * It contains only static methods, thus no object needs to be\n * instantiated and methods can be called directly.\n *\n * In addition, this library contains the listing of all the brain region computed volumes\n * from the volumetric files `annotation_10.nrrd` and `annotation_25.nrrd` for both **ccfv2** (2014)\n * and **ccfv3** (2017). The method `getRegionVolume(...)` makes it easy to get the\n * volume of any given brain region (in cubic micrometer) and let you specify the version and\n * resolution of the atlas.\n *\n * Example:\n *\n * ```javascript\n * import oneallenbrainontology from 'oneallenbrainontology'\n * let allRegionNames = oneallenbrainontology.getAllRegionNames()\n * ```\n *\n * When querying a specific brain region, the returned value if found will be of the form:\n * ```javascript\n * {\n *   \"id\": 567,\n *   \"atlas_id\": 70,\n *   \"ontology_id\": 1,\n *   \"acronym\": \"CH\",\n *   \"name\": \"Cerebrum\",\n *   \"color_hex_triplet\": \"B0F0FF\",\n *   \"graph_order\": 2,\n *   \"st_level\": 2,\n *   \"hemisphere_id\": 3,\n *   \"parent_structure_id\": 8,\n *   \"children_structure_id\": [\n *     688,\n *     623\n *   ],\n *   \"isLeaf\": false,\n *   \"slug\": \"cerebrum\"\n * }\n * ```\n *\n * Where\n * - `id`: **number** the identifier of the brain region (given by AIBS)\n * - `acronym`: **string** is the short unique name for a region (given by AIBS)\n * - `name`: **string** full name of the brain region (given by AIBS)\n * - `color_hex_triplet`: **string** the color of the brain region in hexadecimal (given by AIBS)\n * - `parent_structure_id`: **number** the `id` of the parent brain structure (given by AIBS)\n * - `children_structure_id`: **[number]** list of region `id`s this region is the parent of (AIBS gives a list of nodes instead of a list of `id`, but here the whole tree has been flattened)\n * - `isLeaf`: **boolean** says if the brain region is a leaf of the tree (`true`, it does not have child region) or if it has child brain region (`false`). Not that this could easily be deduced from length of the `children_structure_id` list.\n * - `slug`: **string** a URL compatible name\n * - `atlas_id`: **number** some field given by AIBS (no more info about it)\n * - `ontology_id`: **number** some field given by AIBS (no more info about it)\n * - `graph_order`: **number** some field given by AIBS (no more info about it)\n * - `st_level`: **number** some field given by the AIBS (no more info about it)\n * - `hemisphere_id`: **number** some field given by the AIBS (no more info about it)\n * ---\n * # Methods\n */\nclass OneAllenBrainOntology {\n\n  /**\n   * Get the raw data (1.json) that contains nested nodes\n   * @return {object} the raw data\n   *\n   * @example\n   * let rawData = oneallenbrainontology.getRawData()\n   */\n  static getRawData(){\n    return rawData\n  }\n\n\n  /**\n   * Get the root node, which is the most top level node and has no parent.\n   * @return {Object} the node\n   *\n   * @example\n   * let rootNode = oneallenbrainontology.getRootNode()\n   */\n  static getRootNode(){\n    return indexPerId[rootNodeId]\n  }\n\n\n  /**\n   * Get the full list of region names (lowercase) as an array\n   * @return {Array}\n   *\n   * @example\n   * let allRegionNames = oneallenbrainontology.getAllRegionNames()\n   */\n  static getAllRegionNames(){\n    return listOfNames\n  }\n\n\n  /**\n   * Get the full list of region acronyms (lowercase) as an array\n   * @return {Array}\n   *\n   * @example\n   * let allRegionAcronyms = oneallenbrainontology.getAllRegionAcronyms()\n   */\n  static getAllRegionAcronyms(){\n    return listOfAcronyms\n  }\n\n\n  /**\n   * Get the full list of region ID (integers) as an array\n   * @return {Array}\n   *\n   * @example\n   * let allBrainRegionId = oneallenbrainontology.getAllRegionId()\n   */\n  static getAllRegionId(){\n    return listOfIds\n  }\n\n\n  /**\n   * Get a region by its strict full name (case insensitive)\n   * @param {string} name - full name of the brain region\n   * @return {Object} the brain region metadata\n   *\n   * @example\n   * let visa23 = oneallenbrainontology.getRegionByFullName('anterior area, layer 2/3')\n   */\n  static getRegionByFullName(name) {\n    let usableName = name.toLowerCase().trim()\n    if(usableName in indexPerName){\n      return indexPerName[usableName]\n    }\n    return null\n  }\n\n\n  /**\n   * Get a region by its strict acronym (case insensitive)\n   * @param {string} ac - acronym of the brain region\n   * @return {Object} the brain region metadata\n   *\n   * @example\n   * let visa23 = oneallenbrainontology.getRegionByAcronym('visa2/3')\n   */\n  static getRegionByAcronym(ac) {\n    let usableAc = ac.toLowerCase().trim()\n    if(usableAc in indexPerAcronym){\n      return indexPerAcronym[usableAc]\n    }\n    return null\n  }\n\n\n  /**\n   * Get a region by its strict slug (case insensitive)\n   * @param {string} slug - slug of the brain region\n   * @return {Object} the brain region metadata\n   *\n   * @example\n   * let orbL23 = oneallenbrainontology.getRegionBySlug('orbital_area_layer_2_3')\n   */\n  static getRegionBySlug(slug) {\n    let usableSlug = slug.toLowerCase().trim()\n    if(usableSlug in indexPerSlug){\n      return indexPerSlug[usableSlug]\n    }\n    return null\n  }\n\n\n  /**\n   * Get a region by its id\n   * @param {number} id - id of the brain region\n   * @return {Object} the brain region metadata\n   *\n   * @example\n   * let visa23 = oneallenbrainontology.getRegionById(312782554)\n   */\n  static getRegionById(id) {\n    if(id in indexPerId){\n      return indexPerId[id]\n    }\n    return null\n  }\n\n\n  /**\n   * Get the list of child regions given the ID of the parent region.\n   * @param {string|number} parentId - the id of the parent node\n   * @return {Array} array of regions, alphabetically sorted by name.\n   * If the parentId does not exist or if it has no children, then an empty array is returned.\n   *\n   * @example\n   * let children = oneallenbrainontology.getChildRegionsFromId(997)\n   *\n   */\n  static getChildRegionsFromId(parentId){\n    if(!(parentId in indexPerId)){\n      return []\n    }\n\n    let parentRegion = indexPerId[parentId]\n    return parentRegion.children_structure_id\n            .map(id => indexPerId[id])\n            .sort((a, b) => a.name < b.name ? -1 : 1)\n  }\n\n\n  /**\n   * Get the parent region given the id of a child.\n   * @param {string|number} childId - the id of the child region to get the parent of\n   * @return {Object|null} the parent region or null if no parent (aka. root node)\n   *\n   * @example\n   * let parent = oneallenbrainontology.getParentRegionFromId(304325711)\n   */\n  static getParentRegionFromId(childId){\n    if(!(childId in indexPerId) || childId === rootNodeId){\n      return null\n    }\n\n    let childRegion = indexPerId[childId]\n    return indexPerId[childRegion.parent_structure_id]\n  }\n\n\n  /**\n   * Get the list of IDs of all the brain regions that are at a higher level than\n   * the one given.\n   * @param {number|string} id - id of the brain region to find the ancestors of\n   * @param {object} options - the options object\n   * @param {boolean} options.omitChild - if true, the id provided as argument will not be part of the list (dafault: false, the one provided is part of the list)\n   * @param {boolean} options.rootFirst - if true, the order will be starting with the root node, if false, the list will be ending by the root (default: false)\n   * @return {array} of region IDs in ascending order (default) or descending order\n   *\n   * @example\n   * let ancestors = oneallenbrainontology.getAscendantsFromId(159, {\n   *   rootFirst: true,\n   *   omitChild: false\n   *  })\n   */\n  static getAscendantsFromId(id, options = {}){\n    if(!(id in indexPerId)){\n      return null\n    }\n\n    let omitChild = \"omitChild\" in options ? options.omitChild : false\n    let rootFirst = \"rootFirst\" in options ? options.rootFirst : false\n\n    let region = indexPerId[id]\n    let ancestors = []\n\n    if(!omitChild){\n      ancestors.push(id)\n    }\n\n    while(region.parent_structure_id){\n      let parentId = region.parent_structure_id\n      ancestors.push(parentId)\n      region = indexPerId[parentId]\n    }\n\n    if(rootFirst){\n      ancestors.reverse()\n    }\n    return ancestors.map(ancestorId => indexPerId[ancestorId])\n  }\n\n\n  /**\n   * Get all the descendants from a given brain region. The descendants are the\n   * children and all the children of the children recursively until the leaf nodes\n   * are reached.\n   * @param {number|string} id - id of the region to list the descendants of\n   * @param {opbject} options - the option object\n   * @param {boolean} options.keepCurrent - if true, the region given as argument will also be added, if false, only the descendants will be added (default: false)\n   * @param {boolean} options.leafOnly - if true, only the leaf region will be added (a leaf is a region that has no child) (default: false)\n   * @return {array} the descendants\n   *\n   * @example\n   * let allChildren = oneallenbrainontology.getDescendantsFromId(997, { // 997 is the top region, the one that contains all the others\n   *   keepCurrent: true, // this one will actually not apply as 997 is not a leaf\n   *   leafOnly: true     // and here we want only the leaf\n   * })\n   */\n  static getDescendantsFromId(id, options={}){\n    if(!(id in indexPerId)){\n      return null\n    }\n\n    let keepCurrent = 'keepCurrent' in options ? options.keepCurrent : false\n    let leafOnly = 'leafOnly' in options ? options.leafOnly : false\n    let parentNode =  indexPerId[id]\n    let allChildren = []\n\n    if(keepCurrent){\n      if((leafOnly && parentNode.isLeaf) || !leafOnly){\n        allChildren.push(parentNode)\n      }\n    }\n\n    function exploreChild(node){\n      node.children_structure_id.forEach(childId => {\n        let childNode = indexPerId[childId]\n        if((leafOnly && childNode.isLeaf) || !leafOnly){\n          allChildren.push(childNode)\n        }\n        exploreChild(childNode)\n      })\n    }\n\n    exploreChild(parentNode)\n    return allChildren\n  }\n\n\n  /**\n   * Gives the volume in um^3 (cubic micro-meter) of the given brain region,\n   * using some builtin atlas data.\n   * Pro-tip: divide by 1E9 to get the volume in mm^3 and again by 1E3 for cm^3.\n   * @param {number|string} id - the id of the brain region to get the volume of\n   * @param {object} options - the option object\n   * @param {string} options.atlas - 'ccfv2' or 'ccfv3' (default: 'ccfv3')\n   * @param {string} options.resolution - the resolution of the voletric data the volume were computed from. '10um' or '25um' (default: '10um')\n   * @return {number} the volume of the brain region in cubic micro-meter\n   *\n   * @example\n   * let volume = oneallenbrainontology.getRegionVolume(997, {\n   *   atlas: 'ccfv3',\n   *   resolution: '10um'\n   * })\n   * console.log(`The whole mouse brain has a volume of ${volume/1E12} cm^3`)\n   */\n  static getRegionVolume(id, options={}){\n    if(!(id in indexPerId)){\n      return null\n    }\n\n    let atlasVersion = 'atlas' in options ? options.atlas : 'ccfv3'\n    let resolution = 'resolution' in options ? options.resolution : '10um'\n\n    let regionVolumesOfChoice = null\n    try{\n      regionVolumesOfChoice = regionVolumes[atlasVersion][resolution]\n    } catch(e){\n      throw new Error(`The atlas ${atlasVersion} at resolution ${resolution} does not exist.`)\n      return null\n    }\n\n    let descendants = OneAllenBrainOntology.getDescendantsFromId(id, {\n      keepCurrent: true\n    })\n\n    let totalVolume = 0\n    for(let i= 0; i<descendants.length; i++){\n      totalVolume += regionVolumesOfChoice[descendants[i].id ] || 0\n    }\n\n    return totalVolume\n  }\n\n\n\n  /**\n   * Search a region using multiple words.\n   * There is possibly multiple matches when all the words of the query are found\n   * in the [full name + acronym + id] of a brain region\n   * @param {string} query - possibly multiple words\n   * @return {array} brain regions or empty if not found\n   *\n   * @example\n   * let cerebellumRelated = oneallenbrainontology.findRegion('cerebel')\n   * let layer23Related = oneallenbrainontology.findRegion('layer 2/3')\n   */\n  static findRegion(query){\n    let queryWords = query.split(' ').map(s => s.toLocaleLowerCase())\n\n    let listOfRegions = listOfFullIndex\n      .filter(function(elem) {\n        return queryWords.every(word => !!~elem.indexOf(word))\n      })\n      .sort() // we prefer alphabetical order\n      .map(function(acr) {\n        return indexPerAll[acr]\n      })\n\n    return listOfRegions\n  }\n\n\n\n\n\n  /**\n   * Rebuild the tree with nested objects (non-flat) from the list of nodes.\n   * Internally, the path to the root is found for each node and children list\n   * of ids are replaced with child nodes.\n   * The tree is built bottom-up,\n   * meaning all the node that match the query willl be added to the tree as well\n   * as their parent, up to the root node.\n   * @param {array} nodes - list of nodes to build the partial tree on\n   * @return {Object} the tree starting with the root node\n   *\n   * @example\n   * let partialTree = oneallenbrainontology.buildNestedTree(oneallenbrainontology.getRegionById(140)))\n   *\n   */\n  static buildNestedTree(nodes){\n    let allNodesInvolved = {}\n\n    for(let i=0; i<nodes.length; i++){\n      let ascendants = OneAllenBrainOntology.getAscendantsFromId(nodes[i].id, {rootFirst: true,omitChild: false})\n                      .filter(n => !(n.id in allNodesInvolved))\n                      .forEach(n => allNodesInvolved[n.id] = n)\n\n    }\n\n    // make a hard deep copy to not alter the dataset\n    allNodesInvolved = JSON.parse(JSON.stringify(allNodesInvolved))\n\n    // replace the prop 'children_structure_id' (= list of ids) with the prop 'children' (= list of nodes)\n    Object.keys(allNodesInvolved).forEach(id => {\n      let node = allNodesInvolved[id]\n      node.children = node.children_structure_id.map(id => allNodesInvolved[id]).filter(n => n != undefined)\n      delete node.children_structure_id\n    })\n\n    return allNodesInvolved[OneAllenBrainOntology.getRootNode().id]\n\n  }\n\n\n  /**\n   * Build a tree in a nested way, based on the query. The tree is built bottom-up,\n   * meaning all the node that match the query willl be added to the tree as well\n   * as their parent, up to the root node.\n   *\n   * @param {string} q - query, a substring of the region name, not case sensitive.\n   * @return {Object} the tree starting with the root node\n   *\n   * @example\n   * let partialTree = oneallenbrainontology.buildNestedTreeFromQuery('layer')\n   */\n  static buildNestedTreeFromQuery(q=''){\n    let nodes = oneallenbrainontology.findRegion(q)\n    let nestedTree = oneallenbrainontology.buildNestedTree(nodes)\n    return nestedTree\n  }\n\n\n}\n\nexport default OneAllenBrainOntology\n"],"names":["name","acronym","id"],"mappings":"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"}